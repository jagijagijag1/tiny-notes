<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>開発メモ on jagijagijag1 tiny tech notes</title><link>https://jagijagijag1.github.io/tiny-notes/categories/%E9%96%8B%E7%99%BA%E3%83%A1%E3%83%A2/</link><description>Recent content in 開発メモ on jagijagijag1 tiny tech notes</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sat, 30 Jan 2021 21:02:34 +0900</lastBuildDate><atom:link href="https://jagijagijag1.github.io/tiny-notes/categories/%E9%96%8B%E7%99%BA%E3%83%A1%E3%83%A2/index.xml" rel="self" type="application/rss+xml"/><item><title>Python/TyperでCLIツール開発メモ</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2021_01_30_21_02_33/</link><pubDate>Sat, 30 Jan 2021 21:02:34 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2021_01_30_21_02_33/</guid><description>pythonでCLIツール作るときのライブラリとして，Clickが有名 これを更に簡単に使えるようにしたライブラリとしてTyperがある これを</description></item><item><title>WSL 2を使ってVSCodeで開発する</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2020_07_26_21_53_16/</link><pubDate>Sun, 26 Jul 2020 21:53:16 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2020_07_26_21_53_16/</guid><description>環境・事前状況 Surface Go Windows 2004以上 WSLのUbuntuをインストール済み，WSL 2に移行したい WSL 2を準備する 基本は↓に従う Windows Subsystem for Linux (WSL) を Windows 10 にイ</description></item><item><title>Pythonデコレータ</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2020_05_20_12_05_28/</link><pubDate>Wed, 20 May 2020 12:05:28 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2020_05_20_12_05_28/</guid><description>Pythonのデコレータを理解するための12Step - Qiita の抜粋 クロージャで関数定義時の自分を囲むスコープの情報を記憶している そのため下記では</description></item><item><title>プログラミング言語Go完全入門</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2020_05_17_21_21_54/</link><pubDate>Sun, 17 May 2020 21:21:54 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2020_05_17_21_21_54/</guid><description>1. Goに触れる Goの特徴 シンプルで協力な記述 機能を増やすことで言語を拡張していくことはしない 並行プログラミング マルチコア前提，並行処理とガー</description></item><item><title>Go + WebAssembly お試し</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2020_05_16_16_53_38/</link><pubDate>Sat, 16 May 2020 16:53:38 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2020_05_16_16_53_38/</guid><description>WebAssembly ref: WebAssembly | MDN モダンなウェブブラウザーで実行できる新しいタイプのコード ネイティブに近いパフォーマンスで動作するコンパクトなバイナリー形式の低レベ</description></item><item><title>Next.js チュートリアル実施メモ</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2020_05_04_22_55_26/</link><pubDate>Mon, 04 May 2020 22:55:26 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2020_05_04_22_55_26/</guid><description>大幅にリニューアルされた Next.js のチュートリアルをどこよりも早く全編和訳しました - Qiita メモ ページ単位で静的サイト生成とサーバーサイドレンダリングを選</description></item><item><title>conftestざっくり調査</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2020_04_26_15_53_09/</link><pubDate>Sun, 26 Apr 2020 15:53:09 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2020_04_26_15_53_09/</guid><description>GitHub - instrumenta/conftest: Write tests against structured configuration data using the Open Policy Agent Rego query language YAML/JSONをチェックできるツール チェックする内容はOpen Policy Agentの規定する言語Regoで記述</description></item><item><title>Python 3.7 dataclass</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2020_04_19_22_18_35/</link><pubDate>Sun, 19 Apr 2020 22:18:35 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2020_04_19_22_18_35/</guid><description>ref: dataclasses &amp;mdash; データクラス — Python 3.8.2 ドキュメント Pythonではstructがないのでデータ集合をclassで書かないといけない そこでdataclass</description></item><item><title>Rustにおけるゼロコスト抽象化 (zero-cost abstraction) について調べたメモ</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2020_02_10_21_04_22/</link><pubDate>Mon, 10 Feb 2020 21:04:22 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2020_02_10_21_04_22/</guid><description>参考: Abstraction without overhead: traits in Rust | Rust Blog 要するに 言語上の抽象型の扱い方の話 抽象化の処理に最小限のコストしかかからないという意味 Rustでは静的ディスパッチと</description></item><item><title>Github Actionを途中まで試して諦めたメモ</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2019_10_19_23_03_49/</link><pubDate>Sat, 19 Oct 2019 23:03:49 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2019_10_19_23_03_49/</guid><description>YAMLで書く onでトリガにするイベントを書く 例えばissuesでclosedしたとき，pushがあったときなど jobsで実行するタスクを書</description></item><item><title>Dropbox API使うときに必要だったGo言語のinterface変数をより具体的な型の変数として扱う手段</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2019_02_24_18_26_29/</link><pubDate>Sun, 24 Feb 2019 18:26:29 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2019_02_24_18_26_29/</guid><description>型アサーション = interface変数をより具体的な型の変数として扱う手段 Go言語でinterface型の変数をダウンキャスト的に扱いたい場</description></item><item><title>Go言語のLambda関数でAPI Gateway経由のJSON入力を処理するときのベース</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2019_02_16_22_12_26/</link><pubDate>Sat, 16 Feb 2019 22:12:26 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2019_02_16_22_12_26/</guid><description>Go言語で作ったLambda関数にて，API Gateway経由でJSON形式の入力を受け取る処理のベース部分の作りについてメモ 環境 MacOS Mojave Go 1.11.5 Serverless</description></item><item><title>CloudFormationでのつまづき</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2018_11_09_17_18_51/</link><pubDate>Fri, 09 Nov 2018 17:18:51 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2018_11_09_17_18_51/</guid><description>CloudFormation Designer CodeCommit, CodeBuildは扱えない CloudFormation自体では対応しているので，テンプレートに直書きは可能 CloudFormation from CLI 環境 Windows 10 Pro PoserShell aws cli は下</description></item><item><title>AWS Lambdaで時間を扱ったときの気づき・注意点</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2018_11_07_22_13_07/</link><pubDate>Wed, 07 Nov 2018 22:13:07 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2018_11_07_22_13_07/</guid><description>CloudWatch Eventsでの時間指定 イベントソースをcron式で時間指定する場合，UTCで指定すること e.g. JSTで毎日午前1時に実行したい→UTCで午後</description></item><item><title>Lambdaプロキシ利用時の関数のレスポンス形式</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2018_11_24_16_02_42/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2018_11_24_16_02_42/</guid><description>[Lambdaプロキシ] レスポンスは決められた形式で返す (単なる文字列を返すなどは不可) 参考：API Gateway の Lambda プロキシ統合をセットアップする - Amazon</description></item></channel></rss>