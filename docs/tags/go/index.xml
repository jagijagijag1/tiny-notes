<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on jagijagijag1 tiny tech notes</title><link>https://jagijagijag1.github.io/tiny-notes/tags/go/</link><description>Recent content in Go on jagijagijag1 tiny tech notes</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 17 May 2020 21:21:54 +0900</lastBuildDate><atom:link href="https://jagijagijag1.github.io/tiny-notes/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>プログラミング言語Go完全入門</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2020_05_17_21_21_54/</link><pubDate>Sun, 17 May 2020 21:21:54 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2020_05_17_21_21_54/</guid><description>1. Goに触れる Goの特徴 シンプルで協力な記述 機能を増やすことで言語を拡張していくことはしない 並行プログラミング マルチコア前提，並行処理とガー</description></item><item><title>Go + WebAssembly お試し</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2020_05_16_16_53_38/</link><pubDate>Sat, 16 May 2020 16:53:38 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2020_05_16_16_53_38/</guid><description>WebAssembly ref: WebAssembly | MDN モダンなウェブブラウザーで実行できる新しいタイプのコード ネイティブに近いパフォーマンスで動作するコンパクトなバイナリー形式の低レベ</description></item><item><title>Understanding Real-World Concurrency Bugs in Go</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2019_06_23_13_38_42/</link><pubDate>Sun, 23 Jun 2019 13:38:42 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2019_06_23_13_38_42/</guid><description>著者/所属機関 Tengfei Tu (Pennsylvania State University) et al. 出典 ASPLOS 2019 https://songlh.github.io/paper/go-study.pdf 目的 Goはgoroutineやmessage passingで並行処理を書きやすく，バグを埋め込みにくく</description></item><item><title>Dropbox API使うときに必要だったGo言語のinterface変数をより具体的な型の変数として扱う手段</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2019_02_24_18_26_29/</link><pubDate>Sun, 24 Feb 2019 18:26:29 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2019_02_24_18_26_29/</guid><description>型アサーション = interface変数をより具体的な型の変数として扱う手段 Go言語でinterface型の変数をダウンキャスト的に扱いたい場</description></item><item><title>Go言語のLambda関数でAPI Gateway経由のJSON入力を処理するときのベース</title><link>https://jagijagijag1.github.io/tiny-notes/posts/2019_02_16_22_12_26/</link><pubDate>Sat, 16 Feb 2019 22:12:26 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-notes/posts/2019_02_16_22_12_26/</guid><description>Go言語で作ったLambda関数にて，API Gateway経由でJSON形式の入力を受け取る処理のベース部分の作りについてメモ 環境 MacOS Mojave Go 1.11.5 Serverless</description></item></channel></rss>