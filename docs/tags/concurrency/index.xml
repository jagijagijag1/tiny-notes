<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>concurrency on jagijagijag1 tiny tech notes</title><link>http://jagijagijag1.github.io/tiny-note/tags/concurrency/</link><description>Recent content in concurrency on jagijagijag1 tiny tech notes</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 24 Jun 2019 17:01:48 +0900</lastBuildDate><atom:link href="http://jagijagijag1.github.io/tiny-note/tags/concurrency/index.xml" rel="self" type="application/rss+xml"/><item><title>Reproducing Concurrency Failures from Crash Stacks</title><link>http://jagijagijag1.github.io/tiny-note/posts/2019_06_24_17_01_48/</link><pubDate>Mon, 24 Jun 2019 17:01:48 +0900</pubDate><guid>http://jagijagijag1.github.io/tiny-note/posts/2019_06_24_17_01_48/</guid><description>著者/所属機関 Francesco A. Bianchi (Universit della Svizzera italiana) et al. 出典 ESEC/FSE 2017 目的 並行バグを再現するテストコードの自動生成 問題 並行バグ再現に関する既存手法は下記の2つに分類される</description></item><item><title>Understanding Real-World Concurrency Bugs in Go</title><link>http://jagijagijag1.github.io/tiny-note/posts/2019_06_23_13_38_42/</link><pubDate>Sun, 23 Jun 2019 13:38:42 +0900</pubDate><guid>http://jagijagijag1.github.io/tiny-note/posts/2019_06_23_13_38_42/</guid><description>著者/所属機関 Tengfei Tu (Pennsylvania State University) et al. 出典 ASPLOS 2019 https://songlh.github.io/paper/go-study.pdf 目的 Goはgoroutineやmessage passingで並行処理を書きやすく，バグを埋め込みにくく</description></item></channel></rss>