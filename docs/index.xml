<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jagijagijag1 tiny tech notes</title><link>https://jagijagijag1.github.io/tiny-note/</link><description>Recent content on jagijagijag1 tiny tech notes</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Fri, 14 Aug 2020 20:15:42 +0900</lastBuildDate><atom:link href="https://jagijagijag1.github.io/tiny-note/index.xml" rel="self" type="application/rss+xml"/><item><title>MicroMentor: Peer-to-Peer Software Help Sessions in Three Minutes or Less</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_08_14_20_15_42/</link><pubDate>Fri, 14 Aug 2020 20:15:42 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_08_14_20_15_42/</guid><description>著者/所属機関 Nikhita Joshi (Autodesk Research &amp;amp; University of Waterloo) et al. 出典 CHI 2020 (https://nikhitajoshi.ca/micro-mentor) 内容メモ 学習のために1対1のヘルプは価値が高いが，なかなか人を見つけてつないでもらって同期的にや</description></item><item><title>Supporting Software Dvelopers' Focused Work on Window-Based Desktops</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_08_13_22_49_07/</link><pubDate>Thu, 13 Aug 2020 22:49:07 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_08_13_22_49_07/</guid><description>著者/所属機関 Jan Pilzer (University of British Columbia) et al. 出典 CHI 2020 (https://www.zora.uzh.ch/id/eprint/186554/) 内容メモ タスクに集中するためにはウインドウベースの環境は良くない モニタが大きくなっている(画面の情報</description></item><item><title>Is Rust Used Safely by Software Developers?</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_08_12_22_27_09/</link><pubDate>Wed, 12 Aug 2020 22:27:09 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_08_12_22_27_09/</guid><description>著者/所属機関 Ana Nora Evans (University of Virginia) et al. 出典 ICSE 2020 (https://arxiv.org/abs/2007.00752) 内容メモ Rustはmemory safe，data race freeなコードを記述可能とする堅牢な型システムを</description></item><item><title>Financial Services Industry Lens - AWS Well-Architected Framework</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_08_07_22_32_42/</link><pubDate>Fri, 07 Aug 2020 22:32:42 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_08_07_22_32_42/</guid><description>AWS Well-Architectedの金融特化版を読んで気になったところのメモ https://docs.aws.amazon.com/whitepapers/latest/wellarchitected-financial-services-industry-lens/welcome.html 設定時に注意すべきIAMのアクションが提示されている https://docs.aws.amazon.com/general/latest/gr/aws-security-audit-guide.html#aws-security-audit-review-policy-tips https://docs.aws.amazon.com/wellarchitected/latest/financial-services-industry-lens/aws-identity-and-access-management-iam.html 扱うデ</description></item><item><title>Is There a Single Method for the Internet of Things?</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_08_03_12_55_39/</link><pubDate>Mon, 03 Aug 2020 12:55:39 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_08_03_12_55_39/</guid><description>著者 Ivar Jacobson, Ian Spence, Pan-Wei Ng 出典 acmqueue Volume 15, issue 3, July 11, 2017 (Is There a Single Method for the Internet of Things? - ACM Queue) 所感 Essence本で紹介されてたのでEssenceのIoT適用事例が見れると</description></item><item><title>Machine Learning for a Better Developer Experience</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_07_27_21_29_21/</link><pubDate>Mon, 27 Jul 2020 21:29:21 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_07_27_21_29_21/</guid><description>リンク Machine Learning for a Better Developer Experience | by Netflix Technology Blog | Jul, 2020 | Netflix TechBlog 抜粋・メモ バグ調査で全ログ分析は大変 25GB, 3万行とかのときも 膨大なログに対し，正常なときとの差分をチェ</description></item><item><title>WSL 2を使ってVSCodeで開発する</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_07_26_21_53_16/</link><pubDate>Sun, 26 Jul 2020 21:53:16 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_07_26_21_53_16/</guid><description>環境・事前状況 Surface Go Windows 2004以上 WSLのUbuntuをインストール済み，WSL 2に移行したい WSL 2を準備する 基本は↓に従う Windows Subsystem for Linux (WSL) を Windows 10 にイ</description></item><item><title>SLOG: serializable, low-latency, geo-replicated transactions</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_07_22_22_36_52/</link><pubDate>Wed, 22 Jul 2020 22:36:52 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_07_22_22_36_52/</guid><description>リンク SLOG: serializable, low-latency, geo-replicated transactions | the morning paper 抜粋・メモ シリアライザブルの実現にはcoodinationが必要で，そのため性能が犠牲になる challenge with strict serializability (or even just serializability on a regular DBMS)</description></item><item><title>Cloudburst: stateful functions-as-a-service</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_07_21_23_05_23/</link><pubDate>Tue, 21 Jul 2020 23:05:23 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_07_21_23_05_23/</guid><description>リンク Cloudburst: stateful functions-as-a-service | the morning paper 抜粋・メモ 関数実行の近くにデータをキャッシュするdata shipping技術を提案 (キャッシュされたデータの近くに関数を</description></item><item><title>Meaningful availability</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_07_20_15_33_12/</link><pubDate>Mon, 20 Jul 2020 15:33:12 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_07_20_15_33_12/</guid><description>リンク Meaningful availability | the morning paper 抜粋・メモ 可用性のメトリクスはmeaningfulでpropotionalでactionableで有るべきだが世間ではそう</description></item><item><title>Pythonデコレータ</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_05_20_12_05_28/</link><pubDate>Wed, 20 May 2020 12:05:28 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_05_20_12_05_28/</guid><description>Pythonのデコレータを理解するための12Step - Qiita の抜粋 クロージャで関数定義時の自分を囲むスコープの情報を記憶している そのため下記では</description></item><item><title>プログラミング言語Go完全入門</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_05_17_21_21_54/</link><pubDate>Sun, 17 May 2020 21:21:54 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_05_17_21_21_54/</guid><description>1. Goに触れる Goの特徴 シンプルで協力な記述 機能を増やすことで言語を拡張していくことはしない 並行プログラミング マルチコア前提，並行処理とガー</description></item><item><title>Go + WebAssembly お試し</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_05_16_16_53_38/</link><pubDate>Sat, 16 May 2020 16:53:38 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_05_16_16_53_38/</guid><description>WebAssembly ref: WebAssembly | MDN モダンなウェブブラウザーで実行できる新しいタイプのコード ネイティブに近いパフォーマンスで動作するコンパクトなバイナリー形式の低レベ</description></item><item><title>Next.js チュートリアル実施メモ</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_05_04_22_55_26/</link><pubDate>Mon, 04 May 2020 22:55:26 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_05_04_22_55_26/</guid><description>大幅にリニューアルされた Next.js のチュートリアルをどこよりも早く全編和訳しました - Qiita メモ ページ単位で静的サイト生成とサーバーサイドレンダリングを選</description></item><item><title>conftestざっくり調査</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_04_26_15_53_09/</link><pubDate>Sun, 26 Apr 2020 15:53:09 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_04_26_15_53_09/</guid><description>GitHub - instrumenta/conftest: Write tests against structured configuration data using the Open Policy Agent Rego query language YAML/JSONをチェックできるツール チェックする内容はOpen Policy Agentの規定する言語Regoで記述</description></item><item><title>Millions of tiny databases</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_04_21_11_24_21/</link><pubDate>Tue, 21 Apr 2020 11:24:21 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_04_21_11_24_21/</guid><description>リンク Millions of tiny databases – the morning paper 抜粋・メモ AWS EBSのprimary, replicaストレージノードが参照するconfig情報を保持する分散処理技術 co</description></item><item><title>Python 3.7 dataclass</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_04_19_22_18_35/</link><pubDate>Sun, 19 Apr 2020 22:18:35 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_04_19_22_18_35/</guid><description>ref: dataclasses &amp;mdash; データクラス — Python 3.8.2 ドキュメント Pythonではstructがないのでデータ集合をclassで書かないといけない そこでdataclass</description></item><item><title>Narrowing the gap between serverless and its state with storage functions</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_04_14_11_02_22/</link><pubDate>Tue, 14 Apr 2020 11:02:22 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_04_14_11_02_22/</guid><description>リンク Narrowing the gap between serverless and its state with storage functions – the morning paper 抜粋・メモ サーバーレス関数はステート・データを外出しするのでそこがボトルネックになりがち そこで，ストレー</description></item><item><title>Coyote: Making it easier for developers to build reliable asynchronous software</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_04_13_13_51_43/</link><pubDate>Mon, 13 Apr 2020 13:51:43 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_04_13_13_51_43/</guid><description>リンク Coyote: Making it easier for developers to build reliable asynchronous software - Microsoft Research 抜粋・メモ 分散システムのバグ発見：fault-inejctionやstress testはセットアップが複雑</description></item><item><title>Gandalf: an intelligent, end-to-end analytics service for safe deployment in cloud-scale infrastructure</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_04_07_21_31_31/</link><pubDate>Tue, 07 Apr 2020 21:31:31 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_04_07_21_31_31/</guid><description>リンク Gandalf: an intelligent, end-to-end analytics service for safe deployment in cloud-scale infrastructure – the morning paper 抜粋・メモ 問題が起きてからどのデプロイが問題だった理解するのは簡単じゃない → Gandalfがデータ分析</description></item><item><title>Local-first software: you own your data, in spite of the cloud</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_02_23_19_02_37/</link><pubDate>Sun, 23 Feb 2020 19:02:37 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_02_23_19_02_37/</guid><description>リンク Local-first software: you own your data, in spite of the cloud – the morning paper 抜粋・メモ コンセプトは動画見るのがわかりやすい クラウドアプリだとサーバ経由でしかデータアクセスできない＝</description></item><item><title>Rustにおけるゼロコスト抽象化 (zero-cost abstraction) について調べたメモ</title><link>https://jagijagijag1.github.io/tiny-note/posts/2020_02_10_21_04_22/</link><pubDate>Mon, 10 Feb 2020 21:04:22 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2020_02_10_21_04_22/</guid><description>参考: Abstraction without overhead: traits in Rust | Rust Blog 要するに 言語上の抽象型の扱い方の話 抽象化の処理に最小限のコストしかかからないという意味 Rustでは静的ディスパッチと</description></item><item><title>Task-based effectiveness of basic visualizations</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_12_01_21_04_12/</link><pubDate>Sun, 01 Dec 2019 21:04:12 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_12_01_21_04_12/</guid><description>リンク Task-based effectiveness of basic visualizations the morning paper 抜粋・メモ どういうタスクのときにどの可視化手法を使うと良いかを調査 Amazon Mechanical Turkでタスクやってもらって評価 対象にしたのは</description></item><item><title>The inflection point hypothesis: a principled approach to finding the root cause of a failure</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_11_16_17_50_32/</link><pubDate>Sat, 16 Nov 2019 17:50:32 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_11_16_17_50_32/</guid><description>リンク The inflection point hypothesis: a principled approach to finding the root cause of a failure the morning paper 抜粋・メモ Kairux: 提案手法 普通のroot cause analysisはfailureからbackwardで探すが，</description></item><item><title>Stop explaining black box machine learning models for high stakes decisions and use interpretable models instead</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_11_10_22_23_00/</link><pubDate>Sun, 10 Nov 2019 22:23:00 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_11_10_22_23_00/</guid><description>リンク Stop explaining black box machine learning models for high stakes decisions and use interpretable models instead the morning paper 抜粋・メモ 説明可能AIという言葉のイマイチさと解釈可能AIの正しそう感 既存技術は機械学習モデルを</description></item><item><title>基礎から学ぶVue.js 個人メモ</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_10_30_08_59_47/</link><pubDate>Wed, 30 Oct 2019 08:59:47 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_10_30_08_59_47/</guid><description>p.46 createdとmountedの使い分け created リアクティブデータが初期化された直後に呼ばれる ＝ DOMは構築されてない thisにはアクセスできる</description></item><item><title>Github Actionを途中まで試して諦めたメモ</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_10_19_23_03_49/</link><pubDate>Sat, 19 Oct 2019 23:03:49 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_10_19_23_03_49/</guid><description>YAMLで書く onでトリガにするイベントを書く 例えばissuesでclosedしたとき，pushがあったときなど jobsで実行するタスクを書</description></item><item><title>Reproducing Concurrency Failures from Crash Stacks</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_06_24_17_01_48/</link><pubDate>Mon, 24 Jun 2019 17:01:48 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_06_24_17_01_48/</guid><description>著者/所属機関 Francesco A. Bianchi (Universit della Svizzera italiana) et al. 出典 ESEC/FSE 2017 目的 並行バグを再現するテストコードの自動生成 問題 並行バグ再現に関する既存手法は下記の2つに分類される</description></item><item><title>Understanding Real-World Concurrency Bugs in Go</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_06_23_13_38_42/</link><pubDate>Sun, 23 Jun 2019 13:38:42 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_06_23_13_38_42/</guid><description>著者/所属機関 Tengfei Tu (Pennsylvania State University) et al. 出典 ASPLOS 2019 https://songlh.github.io/paper/go-study.pdf 目的 Goはgoroutineやmessage passingで並行処理を書きやすく，バグを埋め込みにくく</description></item><item><title>Modern Code Review: A Case Study at Google</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_06_06_22_19_56/</link><pubDate>Thu, 06 Jun 2019 22:19:56 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_06_06_22_19_56/</guid><description>著者/所属機関 Caitlin Sadowski (Google) et al. 出典 ICSE SEiP 2018 目的 Googleにおけるコードレビューの実態調査・知見共有 Methodology Google内の開発者12人へのインタビュー実</description></item><item><title>Replay without Recording of Production Bugs for Service Oriented Applications</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_05_08_22_21_31/</link><pubDate>Wed, 08 May 2019 22:21:31 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_05_08_22_21_31/</guid><description>著者/所属機関 Nipn Arora (Dropbox) et al. 出典 ASE 2018 目的 Service-Oriented Architecure (SOA) のような分散システムにおけるバグの再現 問題 分散システムでは下記特性のためデバッグが難しい 再現にオー</description></item><item><title>How bad can it git? Characterizing secret leakage in public GitHub repositories</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_04_21_20_45_43/</link><pubDate>Sun, 21 Apr 2019 20:45:43 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_04_21_20_45_43/</guid><description>リンク How bad can it git? Characterizing secret leakage in public GitHub repositories | the morning paper 抜粋・メモ GitHubのリポジトリにsecret keyが公開されるケースの調査論文 公開されてしまったs</description></item><item><title>Teaching rigorous distributed systems with efficient model checking</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_04_20_20_35_31/</link><pubDate>Sat, 20 Apr 2019 20:35:31 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_04_20_20_35_31/</guid><description>リンク Teaching rigorous distributed systems with efficient model checking | the morning paper 抜粋・メモ 学生に分散アルゴリズムを勉強させる際に，テストでの確認は難しいので，モデル検査を組み込んだ環境(フレ</description></item><item><title>Are Mobile Banking Apps Secure? What Can Be Improved?</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_04_09_20_57_22/</link><pubDate>Tue, 09 Apr 2019 20:57:22 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_04_09_20_57_22/</guid><description>著者/所属機関 Sen Chen (East China Normal University) et al. 出典 ESEC/FSE 2018 目的 金融機関が提供するモバイルアプリにおけるセキュリティ対策状況や，セキュリティ報告に対する応対を調査</description></item><item><title>The Seven Sins: Security Smells in Infrastructure as Code Scripts</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_03_21_21_38_23/</link><pubDate>Thu, 21 Mar 2019 21:38:23 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_03_21_21_38_23/</guid><description>著者/所属機関 Akod Rahman (North Carolina State University) et al. 出典 ICSE 2019 本会議前なので読んだのはこちらのpre-print 目的 Infrastructure as Code (IaC) のスクリプトに存在するセキュリティ上のリ</description></item><item><title>REPT: reverse debugging of failures in deployed software</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_03_16_22_40_13/</link><pubDate>Sat, 16 Mar 2019 22:40:13 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_03_16_22_40_13/</guid><description>リンク REPT: reverse debugging of failures in deployed software | the morning paper 抜粋・メモ 特にメモリダンプしか手に入らない状態での本番環境のクラッシュをデバッグ支援技術 REPTの提案 reco</description></item><item><title>Bench4BL: Reproducibility Study on the Performance of IR-Based Bug Localization</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_03_15_19_26_46/</link><pubDate>Fri, 15 Mar 2019 19:26:46 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_03_15_19_26_46/</guid><description>著者/所属機関 Jaekwon Lee (University of Luxembourg) et al. 出典 ISSTA 2018 目的 Information Retrival技術を用いるBug localization手法の再現性のある性能測定 バグレポートと</description></item><item><title>キーキャップの種類</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_03_13_21_49_49/</link><pubDate>Wed, 13 Mar 2019 21:49:49 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_03_13_21_49_49/</guid><description>自作キーボード界隈で出てくる用語がわからなかったので調べたメモ キーキャップの形状 Cherry 傾斜のついたキーキャップ，高さが低め 軸の用語とは別でキーキ</description></item><item><title>A PHP2UML model transformation for PHP reverse engineering</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_03_10_20_55_51/</link><pubDate>Sun, 10 Mar 2019 20:55:51 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_03_10_20_55_51/</guid><description>リンク A PHP2UML model transformation for PHP reverse engineering 抜粋・メモ PHPソースコードを解析してUML図を生成 MoDiscoをPHPに拡張，ASTとしてEclipse PHP Development Too</description></item><item><title>Dropbox API使うときに必要だったGo言語のinterface変数をより具体的な型の変数として扱う手段</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_02_24_18_26_29/</link><pubDate>Sun, 24 Feb 2019 18:26:29 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_02_24_18_26_29/</guid><description>型アサーション = interface変数をより具体的な型の変数として扱う手段 Go言語でinterface型の変数をダウンキャスト的に扱いたい場</description></item><item><title>Go言語のLambda関数でAPI Gateway経由のJSON入力を処理するときのベース</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_02_16_22_12_26/</link><pubDate>Sat, 16 Feb 2019 22:12:26 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_02_16_22_12_26/</guid><description>Go言語で作ったLambda関数にて，API Gateway経由でJSON形式の入力を受け取る処理のベース部分の作りについてメモ 環境 MacOS Mojave Go 1.11.5 Serverless</description></item><item><title>Testing Cloud Applications under Cloud-Uncertainty Performance Effects</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_02_13_20_27_50/</link><pubDate>Wed, 13 Feb 2019 20:27:50 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_02_13_20_27_50/</guid><description>著者/所属機関 Wei Wang (University of Texas) et al. 出典 ICST 2018 目的 マルチテナントなクラウド上でのアプリケーション性能保証 問題 マルチテナント環境では予測困難な性能のブレ</description></item><item><title>「コンテナ技術入門」の記事を追いかけたときのメモ</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_02_10_22_50_32/</link><pubDate>Sun, 10 Feb 2019 22:50:32 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_02_10_22_50_32/</guid><description>読んだ記事 コンテナ技術入門 - 仮想化との違いを知り、要素技術を触って学ぼう - エンジニアHub｜若手Webエンジニアのキャリアを考える！ 自分の前</description></item><item><title>Localizing Faults in Cloud Systems</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_02_09_15_33_24/</link><pubDate>Sat, 09 Feb 2019 15:33:24 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_02_09_15_33_24/</guid><description>著者/所属機関 Leonardo Mariani (Universita degli studi di Milano Bicocca) et al. 出典 ICST 2018 目的 クラウド上で動作するアプリケーション(役割ごとのサーバ/VMで動作する分散アプリケーション)に</description></item><item><title>SageDB: a learned database system</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_02_07_21_59_39/</link><pubDate>Thu, 07 Feb 2019 21:59:39 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_02_07_21_59_39/</guid><description>リンク SageDB: a learned database system | the morning paper 抜粋・メモ The core idea behind SageDB is to build one or more models about the data and workload distribution and based on them automatically build the best data structures and algorithms for all components of the database system. データや負荷分布のモデルを作り，</description></item><item><title>Automatic Generation of Test Cases for REST APIs: a Specification-Based Approach</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_02_03_21_56_22/</link><pubDate>Sun, 03 Feb 2019 21:56:22 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_02_03_21_56_22/</guid><description>著者/所属機関 Hamza Ed-douibi (Universitat Oberta de Catalunya) et al. 出典 IEEE EDOC 2018 https://modeling-languages.com/wp-content/uploads/2018/10/edoc2018.pdf 目的 REST API仕様定義に基づくテストケースの自動生成 特に本論文ではOpenAPIが対象 問題 既存技術(</description></item><item><title>Our learnings from adopting GraphQL</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_01_27_19_06_32/</link><pubDate>Sun, 27 Jan 2019 19:06:32 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_01_27_19_06_32/</guid><description>リンク Our learnings from adopting GraphQL – Netflix TechBlog – Medium 抜粋・メモ クライアントと各種REST APIとの間にGraphQLを挟むよう改修した Benefits 多くのデータがデータセンタ内を</description></item><item><title>Towards a theory of software development expertise</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_01_24_19_20_28/</link><pubDate>Thu, 24 Jan 2019 19:20:28 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_01_24_19_20_28/</guid><description>著者/所属機関 Sebastian Baltes (University of Trier) et al. 出典 ESEC/FSE 2018 https://arxiv.org/abs/1807.06087 目的 ソフトウェア開発の専門性を表現するモデル(理論)の構築 よい開発者になるためにはどうすればいいか? 手</description></item><item><title>Darwinian data structure selection</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_01_20_16_34_40/</link><pubDate>Sun, 20 Jan 2019 16:34:40 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_01_20_16_34_40/</guid><description>リンク Darwinian data structure selection | the morning paper 抜粋・メモ 複数の実装を取りうる抽象データ型(e.g. List)について，既存のテストをつかってどの具体的なデータ型(e</description></item><item><title>Capturing and enhancing in situ system observability for failure detection</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_01_19_18_07_19/</link><pubDate>Sat, 19 Jan 2019 18:07:19 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_01_19_18_07_19/</guid><description>リンク Capturing and enhancing in situ system observability for failure detection | the morning paper 抜粋・メモ 従来の分散システムの監視：クライアントはログとってリトライなりの対処する＋それとは別に障害を検出</description></item><item><title>Human-competitive Patches in Automatic Program Repair with Repairnator</title><link>https://jagijagijag1.github.io/tiny-note/posts/2019_01_14_13_39_06/</link><pubDate>Mon, 14 Jan 2019 13:39:06 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2019_01_14_13_39_06/</guid><description>著者/所属機関 Martin Monperrus (KTH Royal Institute of Technology) et al. 出典 arXiv.org (https://arxiv.org/abs/1810.05806) 目的 人間に匹敵するプログラム修正の自動化 手法 ビルド失敗を修正するパッチを自動生成するBotを開発 Bo</description></item><item><title>CloudFormationでのつまづき</title><link>https://jagijagijag1.github.io/tiny-note/posts/2018_11_09_17_18_51/</link><pubDate>Fri, 09 Nov 2018 17:18:51 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2018_11_09_17_18_51/</guid><description>CloudFormation Designer CodeCommit, CodeBuildは扱えない CloudFormation自体では対応しているので，テンプレートに直書きは可能 CloudFormation from CLI 環境 Windows 10 Pro PoserShell aws cli は下</description></item><item><title>AWS Lambdaで時間を扱ったときの気づき・注意点</title><link>https://jagijagijag1.github.io/tiny-note/posts/2018_11_07_22_13_07/</link><pubDate>Wed, 07 Nov 2018 22:13:07 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2018_11_07_22_13_07/</guid><description>CloudWatch Eventsでの時間指定 イベントソースをcron式で時間指定する場合，UTCで指定すること e.g. JSTで毎日午前1時に実行したい→UTCで午後</description></item><item><title>Visual Studio Code + VSCodeVim での単語カーソル移動(w, b, e)の簡易日本語対応</title><link>https://jagijagijag1.github.io/tiny-note/posts/2018_10_14_11_48_04/</link><pubDate>Sun, 14 Oct 2018 11:48:04 +0900</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2018_10_14_11_48_04/</guid><description>VSCodeの拡張機能VSCodeVimにて，w, b, eにて単語レベルでカーソル移動をしたい場合の設定についてメモ 結論 VSCodeのsetti</description></item><item><title>Lambdaプロキシ利用時の関数のレスポンス形式</title><link>https://jagijagijag1.github.io/tiny-note/posts/2018_11_24_16_02_42/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jagijagijag1.github.io/tiny-note/posts/2018_11_24_16_02_42/</guid><description>[Lambdaプロキシ] レスポンスは決められた形式で返す (単なる文字列を返すなどは不可) 参考：API Gateway の Lambda プロキシ統合をセットアップする - Amazon</description></item></channel></rss>